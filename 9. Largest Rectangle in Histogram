class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();

        stack<int> st;
        int rightsmallest[n];
        for(int i = n-1; i >= 0; i--) {
            while(!st.empty() && heights[st.top()] >= heights[i]) st.pop();
            if(st.empty()) rightsmallest[i] = n-1;
            else rightsmallest[i] = st.top() - 1;
            st.push(i);
        }

        while(!st.empty()) st.pop();
        int leftsmallest[n];
        for(int i = 0; i < n; i++) {
            while(!st.empty() && heights[st.top()] >= heights[i]) st.pop();
            if(st.empty()) leftsmallest[i] = 0;
            else leftsmallest[i] = st.top() + 1;
            st.push(i);
        }

        int ans = INT_MIN;
        for(int i = 0; i < n; i++) {
            ans = max(ans, heights[i] * (rightsmallest[i] - leftsmallest[i] + 1));
        }
        return ans;
    }
};
